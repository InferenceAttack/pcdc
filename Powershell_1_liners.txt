###################################################################Local Crap##########################################################################################
## Echo out Users with some extra info
Get-LocalUser | Select-Object Name,Enabled,PasswordLastSet,Created

## PowerShell command to remove a user account from the local system:
$baduser = Read-Host "What user account do you wish to kill"; Remove-LocalUser -Name "$baduser"

## Powershell command to show all local groups
Get-LocalGroup

## PowerShell command that will delete a local group on the computer:
$badgroup = Read-Host "What group would you like to delete?";Remove-LocalGroup -Name "$badgroup"

## Echo out members of the local Admin group:
Get-LocalGroupMember -Group "Administrators" | Select-Object Name, PrincipalSource | Format-Table -AutoSize

## PowerShell command to remove an admin from the local "Administrators"group:
$badadmin = Read-Host "What admin account do you wish to kill"; Remove-LocalGroupMember -Group "Administrators" -Member "$badadmin"

## PowerShell that checks for SMB and NFS network shares on the local system (Note: NFS must be installed for the "Get-NfsShare" cmdlet to work):
Get-SmbShare; Get-NfsShare

## PowerShell command that removes a single SMB or NFS network share from the local system:

Remove-SmbShare -Name "BADSHARE"

Remove-NfsShare -Name "BADSHARE"

## PowerShell command that checks for active shells on the local system and asks you if you would like to kill anything via the process Id:
while($true){Clear-Host; Get-Process | Where-Object {$_.ProcessName -match "cmd|powershell|bash"} | Format-Table Name,Id,StartTime;;$badshell = Read-Host "What shell would you like to kill(Id)? Your shell=$PID";Stop-Process -Id "$badshell" -Force -ErrorAction SilentlyContinue; Start-Sleep -Seconds 1}

## To add a new user as a local administrator
Add-LocalGroupMember -Group "Administrators" -Member "username1","username2","username3"

## Creating a new user with password
$username = Read-Host -Prompt "Enter username"; $password = Read-Host -Prompt "Enter password" -AsSecureString; New-LocalUser -Name $username -Password $password





####################################################################Firewall Crap######################################################################################

## Firewall block ports
$port = Read-Host "Enter port numbers to block (comma-separated)"
$ports = $port -split "," | ForEach-Object {$_.Trim()}
$RuleName = "Read-Host "Enter rule name:"

foreach ($port in $ports) {
    New-NetFirewallRule -DisplayName "$RuleName $port" -Direction Inbound -LocalPort $port -Protocol TCP -Action Block
}
## Firewall open Ports
$ports = Read-Host "Enter port numbers to allow (comma-separated)"
$ports = $ports -split "," | ForEach-Object {$_.Trim()}
$RuleName = "Read-Host "Enter rule name:"

foreach ($port in $ports) {
    New-NetFirewallRule -DisplayName "$RuleName"

## Blocking firewall via IP
$IP = Read-Host "Enter the IP address to block"
$RuleName = "Read-Host "Enter rule name:"
$Rule = Get-NetFirewallRule -DisplayName $RuleName

if (!$Rule) {
    New-NetFirewallRule -DisplayName $RuleName -Direction Inbound -RemoteAddress $IP -Action Block
    Write-Host "Firewall rule created to block IP $IP"
}
else {
    Set-NetFirewallRule -DisplayName $RuleName -RemoteAddress $IP -Enabled True
    Write-Host "Firewall rule updated to block IP $IP"
}

## Removing firewall rules by name
$RuleName = Read-Host "Enter the name of the firewall rule to delete"
$Rule = Get-NetFirewallRule -DisplayName $RuleName

if ($Rule) {
    Remove-NetFirewallRule -DisplayName $RuleName
    Write-Host "Firewall rule $RuleName deleted"
}
else {
    Write-Host "Firewall rule $RuleName not found"
}


#################################################################Active Directory Crap#################################################################################

## Quick Creating a AD User account (Need to edit the domain info)
$name = Read-Host "Enter Username"; $Password = Read-Host "Enter password" -AsSecureString; New-ADUser -Name "$name" -SamAccountName "jsmith" -UserPrincipalName "$name@contoso.com" -AccountPassword $Password -Enabled $true -Path "OU=Users,DC=contoso,DC=com"

## Quick AD filtered User enumeration
Get-ADUser -Filter * -Properties GivenName, Surname, EmailAddress

## Quick AD User Removal
$user = Read-Host "Enter Identity of the AD user you wish to delete:"; Remove-ADUser -Identity "$user"

## quick user enumeration
Get-ADUser -Filter * -Properties *





